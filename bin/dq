#!/usr/bin/env node

var dq = require('../lib/dq.js');
var byline = require('byline');
var program = require('commander');
var fs = require('fs');
var path = require('path');

if (typeof fs.existsSync === 'undefined')
  fs.existsSync = fs.existsSync; //Node v0.8



program
  .version(require('../package.json').version)
  .option('-f, --file [inputFile]', 'input file otherwise the default is STDIN')
  .option('-h, --host [host]', 'host of redis server, the default is localhost')
  .option('-a, --auth [password]', 'password of redis server')
  .option('-p, --port [number]', 'port of redis server, the default is 6379')
  .option('-q, --queue [queueName]', 'name of the queue')
  .option('-s, --shuffle', 'insert in random order')
  .parse(process.argv);

if (typeof program.queue === 'undefined') {
  console.log('Invalid number of arguments. Must at least pass the queue name.');
} else {
  var count = 0;

  var stream = null;
  if (program.file && program.file.length > 0) {
    if (!fs.existsSync(program.file)) { console.log("%s does not exist.", program.file); process.exit(1); };
    stream = fs.createReadStream(program.file);
  } else {
    stream = process.stdin;
  }

  program.name = program.queue;
  program.password = program.auth;
  dq.create(program, function(err, q){
    if (err != null) {
      console.log('Error: ' + err.message);
    } else {
      stream.on('end', function(){
        process.nextTick(function(){
          q.quit(function(){
            process.exit(0);
          });
        });
      });

      var lineStream = byline(stream);
      lineStream.on('data', function(line){
        if (program.shuffle) {
          q.enq(line, Math.random());
        } else {
          q.enq(line, count);
        }
        count += 1;
      });
    
      stream.resume();
    }
  });
}


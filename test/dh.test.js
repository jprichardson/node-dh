// Generated by CoffeeScript 1.3.3
(function() {
  var TEST_NAME, dh, testutil;

  dh = require('../lib/dh.js');

  testutil = require('testutil');

  TEST_NAME = 'testhash';

  describe('dh', function() {
    var H;
    H = null;
    beforeEach(function(done) {
      return dh.create({
        name: TEST_NAME
      }, function(err, h) {
        return h.empty(function(err) {
          H = h;
          return done();
        });
      });
    });
    describe('+ create()', function() {
      it('should create a Hash with default params', function(done) {
        return dh.create({
          name: 'someHash'
        }, function(err, h) {
          T(h.name === 'someHash');
          T(h.host === '127.0.0.1');
          T(h.port === 6379);
          T(h.redisKey === 'dh:someHash');
          return done();
        });
      });
      it('should create a Hash with input params', function(done) {
        return dh.create({
          name: 'someHash',
          host: '44.22.11.33',
          port: 6000
        }, function(err, h) {
          T(h.name === 'someHash');
          T(h.host === '44.22.11.33');
          T(h.port === 6000);
          return done();
        });
      });
      return it('should return an error if name doesnt exist', function(done) {
        return dh.create({}, function(err, h) {
          T(err !== null);
          return done();
        });
      });
    });
    describe('- count()', function() {
      return it('should count the items in the hash', function(done) {
        return H.set('a', 1, function(err, res) {
          return H.set('b', 2, function(err, res) {
            return H.set('c', 3, function(err, res) {
              return H.count(function(err, res) {
                T(err === null);
                T(res === 3);
                return done();
              });
            });
          });
        });
      });
    });
    describe('- del()', function() {
      return it('should delete', function(done) {
        return H.set('a', 1, function(err, res) {
          return H.set('b', 2, function(err, res) {
            return H.set('c', 3, function(err, res) {
              return H.del('b', function(err, res) {
                T(err === null);
                return H.count(function(err, res) {
                  T(err === null);
                  T(res === 2);
                  return done();
                });
              });
            });
          });
        });
      });
    });
    describe('- empty()', function() {
      return it('should empty the hash', function(done) {
        return H.set('a', 1, function(err, res) {
          return H.set('b', 2, function(err, res) {
            return H.count(function(err, res) {
              T(res === 2);
              return H.empty(function(err, res) {
                T(err === null);
                return H.count(function(err, res) {
                  T(res === 0);
                  return done();
                });
              });
            });
          });
        });
      });
    });
    describe('- exists()', function() {
      return it('should check to see if field exists', function(done) {
        return H.set('a', 1, function(err, res) {
          return H.set('b', 2, function(err, res) {
            return H.set('c', 3, function(err, res) {
              return H.exists('b', function(err, res) {
                T(res);
                T(err === null);
                return H.del('b', function(err, res) {
                  return H.exists('b', function(err, res) {
                    T(err === null);
                    F(res);
                    return H.set({
                      x: 'hi',
                      y: 'bye'
                    }, function(err, res) {
                      return H.exists('x', function(err, res) {
                        T(err === null);
                        T(res);
                        return H.exists('y', function(err, res) {
                          T(err === null);
                          T(res);
                          return H.exists('z', function(err, res) {
                            T(err === null);
                            F(res);
                            return done();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
    describe('- get()', function() {
      return it('should retrieve the value', function(done) {
        return H.set('b', 2, function(err, res) {
          return H.get('b', function(err, res) {
            T(err === null);
            T(res === '2');
            return H.get('c', function(err, res) {
              T(err !== null);
              T(res === null);
              return done();
            });
          });
        });
      });
    });
    describe('- set()', function() {
      it('should set a field and value', function(done) {
        return H.set('string1', 1, function(err, res) {
          T(err === null);
          return H.count(function(err, res) {
            T(err === null);
            T(res === 1);
            return done();
          });
        });
      });
      it('should set a field and value without a callback', function(done) {
        H.set('someval', 12);
        H.set('someval2', 44);
        return setTimeout(function() {
          return H.count(function(err, res) {
            T(res === 2);
            return done();
          });
        }, 150);
      });
      it('should set multiple keys', function(done) {
        return H.set({
          key1: 'hi',
          key2: 'haa'
        }, function(err, res) {
          T(err === null);
          return H.get('key1', function(err, res) {
            T(err === null);
            T(res === 'hi');
            return H.get('key2', function(err, res) {
              T(err === null);
              T(res === 'haa');
              return done();
            });
          });
        });
      });
      return it('should set a JSON object one key', function(done) {
        return H.set('person1', JSON.stringify({
          firstName: 'JP',
          lastName: 'Richardson'
        }), function(err, res) {
          T(err === null);
          return H.get('person1', function(err, res) {
            var person;
            T(err === null);
            person = JSON.parse(res);
            T(person.firstName === 'JP');
            T(person.lastName === 'Richardson');
            return done();
          });
        });
      });
    });
    return describe('- quit()', function() {
      return it('should set the hasQuit flag', function(done) {
        return dh.create({
          name: 'blah'
        }, function(err, h) {
          F(h.hasQuit);
          return h.quit(function() {
            T(h.hasQuit);
            return done();
          });
        });
      });
    });
  });

}).call(this);
